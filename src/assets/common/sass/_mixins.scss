@mixin transition($d) {
    -webkit-transition-duration: $d;
    transition-duration: $d;
}
@mixin delay($d) {
    -webkit-transition-delay: $d;
    transition-delay: $d;
}
@mixin transform($t) {
    -webkit-transform: $t;
    transform: $t;
}
@mixin transform-origin($to) {
    -webkit-transform-origin: $to;
    transform-origin: $to;
}
@mixin translate3d($x:0, $y:0, $z:0) {
    -webkit-transform: translate3d($x,$y,$z);
    transform: translate3d($x,$y,$z);
}
@mixin animation($a) {
    -webkit-animation: $a;
    animation: $a;
}
@mixin scrollable(){
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}
@mixin flexbox() {
    display: -webkit-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
@mixin flex-wrap($fw) when ($fw = nowrap) {
    -webkit-box-lines: single;
    -moz-box-lines: single;
    -webkit-flex-wrap: nowrap;
    -ms-flex-wrap: none;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
}
@mixin flex-wrap($fw) when ($fw = wrap) {
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
}
@mixin flex-wrap($fw) when not ($fw = wrap) and not ($fw = nowrap) {
    -webkit-flex-wrap: $fw;
    -ms-flex-wrap: $fw;
    flex-wrap: $fw;
}
@mixin flex-shrink($fs) {
    -webkit-flex-shrink: $fs;
    -ms-flex: 0 $fs auto;
    flex-shrink: $fs;
}
@mixin justify-content($jc) when ($jc = flex-start) {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    -webkit-justify-content: flex-start;
    justify-content: flex-start;
}
@mixin justify-content($jc) when ($jc = flex-end) {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    -webkit-justify-content: flex-end;
    justify-content: flex-end;
}
@mixin justify-content($jc) when ($jc = space-between) {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    -webkit-justify-content: space-between;
    justify-content: space-between;
}
@mixin justify-content($jc) when not ($jc = flex-start) and not ($jc = flex-end) and not ($jc = space-between) {
    -webkit-box-pack: $jc;
    -ms-flex-pack: $jc;
    -webkit-justify-content: $jc;
    justify-content: $jc;
}
@mixin align-items($ai) when ($ai = flex-start) {
    -webkit-box-align: start;
    -ms-flex-align: start;
    -webkit-align-items: flex-start;
    align-items: flex-start;
}
@mixin align-items($ai) when ($ai = flex-end) {
    -webkit-box-align: end;
    -ms-flex-align: end;
    -webkit-align-items: flex-end;
    align-items: flex-end;
}
@mixin align-items($ai) when not ($ai = flex-start) and not ($ai = flex-end) {
    -webkit-box-align: $ai;
    -ms-flex-align: $ai;
    -webkit-align-items: $ai;
    align-items: $ai;
}
@mixin align-content($ai) {
    -ms-flex-line-pack: $ai;
    -webkit-align-content: $ai;
    align-content: $ai;
}
@mixin align-self($as) {
    -ms-flex-item-align: $as;
    -webkit-align-self: $as;
    align-self: $as;
}
@mixin clearfix() {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}
@mixin hairline($position, $color) when ($position = top) {
    &:before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: auto;
        right: auto;
        height: 1px;
        width: 100%;
        background-color: $color;
        display: block;
        z-index: 15;
        @include transform-origin(50% 0%);
        html.pixel-ratio-2 & {
            @include transform(scaleY(0.5));
        }
        html.pixel-ratio-3 & {
            @include transform(scaleY(0.33));
        }
    }
}
@mixin hairline($position, $color) when ($position = left) {
    &:before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: auto;
        right: auto;
        width: 1px;
        height: 100%;
        background-color: $color;
        display: block;
        z-index: 15;
        @include transform-origin(0% 50%);
        html.pixel-ratio-2 & {
            @include transform(scaleX(0.5));
        }
        html.pixel-ratio-3 & {
            @include transform(scaleX(0.33));
        }
    }
}
@mixin hairline($position, $color) when ($position = bottom) {
    &:after {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        right: auto;
        top: auto;
        height: 1px;
        width: 100%;
        background-color: $color;
        display: block;
        z-index: 15;
        @include transform-origin(50% 100%);
        html.pixel-ratio-2 & {
            @include transform(scaleY(0.5));
        }
        html.pixel-ratio-3 & {
            @include transform(scaleY(0.33));
        }
    }
}
@mixin hairline($position, $color) when ($position = right) {
    &:after {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        left: auto;
        bottom: auto;
        width: 1px;
        height: 100%;
        background-color: $color;
        display: block;
        z-index: 15;
        @include transform-origin(100% 50%);
        html.pixel-ratio-2 & {
            @include transform(scaleX(0.5));
        }
        html.pixel-ratio-3 & {
            @include transform(scaleX(0.33));
        }
    }
}
// For right and bottom
@mixin hairline-remove($position) when not ($position = left) and not ($position = top) {
    &:after {
        display: none;
    }
}
// For left and top
@mixin hairline-remove($position) when not ($position = right) and not ($position = bottom) {
    &:before {
        display: none;
    }
}
// For right and bottom
@mixin hairline-color($position, $color) when not ($position = left) and not ($position = top) {
    &:after {
        background-color: $color;
    }
}
// For left and top
@mixin hairline-color($position, $color) when not ($position = right) and not ($position = bottom) {
    &:before {
        background-color: $color;
    }
}

// Encoded SVG Background
@mixin encoded-svg-background($svg) {
    $url: `encodeURIComponent(#{$svg})`;
    background-image: url("data:image/svg+xml;charset=utf-8,#{$url}");
}

// Preserve3D
@mixin preserve3d() {
    -webkit-transform-style: preserve-3d;
    -moz-transform-style: preserve-3d;
    -ms-transform-style: preserve-3d;
    transform-style: preserve-3d;
}